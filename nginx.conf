
#user  nobody;
worker_processes  1;

#错误日志
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    #最大并发数
    worker_connections  1024;
}


http {
    include       mime.types;
    #默认文件类型
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    #gzip 配置
    #开启 gzip 压缩
    #gzip  on;
    #压缩的类型
    #gzip_types text/plain application/javascript text/css;
    #设置系统获取几个单元的缓存用于存储gzip的压缩结果数据流
    #gzip_buffers
    #gzip压缩比，压缩级别为 1-9 ，1级压缩级别最低，压缩级别越高，压缩率越大，压缩时间越长
    #gzip_comp_level 
    #可以通过该指令对一些特定的User-Agent不使用压缩功能
    #gzip_disable
    #设置允许压缩的页面最小字节数，页面字节数从响应消息头的Content-Length中捷星获取
    #gzip_min_length
    #识别HTTP协议版本，其值可以是 1.1.  或者  1.0.
    #gzip_http_version
    #用于设置启用或禁用从代理服务器上收到相应内容gzip压缩
    #gzip_proxied
    #用于在响应消息头中添加Vary: Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩
    #gzip_vary



    #以下是子配置项
    # server 开头的是虚拟主机 基于端口号的虚拟主机
    server {
        #监听端口号
        listen       80;
        #root 文件防止的路径
        root /html8001;
        #访问路径
        #基于IP的虚拟主机只要在这里写清楚IP就行了
        #基于域名的虚拟主机只要在这里写清楚域名就行了
        server_name  localhost; 
        #索引文件
        index index.html;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
            #权限配置：不允许访问的 IP
            deny 192.168.5.23;#假的，只是个例子IP
            #或者 配置允许访问的  allow 必须放在上面，从上往下一行一行执行的
            #allow 192.168.23.2;
            #deny all;
        }
        #配置目录的访问权限
        # =/img精确匹配 img 目录
        location = /img{
            allow all;
        }
        location = /admin{
            deny all;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        #新增 404状态码的错误页面
        error_page 404 /404_error.html;
        location = /50x.html {
            root   html;
        }
        #根据正则表达式配置访问权限: 所有的PHP 文件都不许访问
        #正则表达式规则： ~表示启用正则， ~* 表示不区分大小写
        location ~ \.php$ {
            deny all;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    #反向代理
    server {
        listen 8008;
        server_name localhost;
        location ~ /edu/ { #路径中有 edu 代理到 百度
            proxy_pass http://www.baidu.com
        }
        location / {
            proxy_pass http://jspang.com;
            #一些反向代理的指令
            #proxy_set_header 在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息
            #proxy_connect_timeout 配置Nginx与后端代理服务器尝试简历连接的超时时间
            #proxy_read_timeout 配置Nginx后端服务器组发出read请求后，等待响应的超时时间
            #proxy_send_timeout 配置Nginx向后端服务器组发出write请求后，等待响应的超时时间
            #proxy_redirect 用户修改后端服务器返回的响应头中的Location和Refresh

        }
    }
    #配置 pc 和 移动端的站点
    server {
        listen 8008;
        server_name localhost;
        location / {
            root /html/pc;
            if($http_user_agent ~* 'Andriod|webOS|iPhone|iPod|BlackBerry'){
                root /html/mobile;
            }
            index index.html;
        }
    }

    #负载均衡
    upstreat myServer{ 
    # 这是负载均衡的目标服务器，
    # 1.默认机制是轮询
    # 2.还有按权重分配 
    #   例如：每个服务器的后面加上权重
    #   server 192.16832.32:8080 weight=5;
    #   权重越高分配的连接越多
    # 3.ip_hash
    #    例如 第一行加一个 ip_hash;
    #    ip_hash;
    #    server 192.16832.32:8080;
    #    每个请求按访问IP的hash结果分配，这样客户端就会固定访问一个服务器，
    #    可以解决 session 问题
    # 4.fair 方式，按后端服务器的响应时间来分配，响应时间短的优先
    #    例如： 最后加一个 fair
    #         server 192.16832.65:8081; 
    #         server 192.16832.32:8080;
    #         fair;
        server 192.16832.32:8080;
        server 192.16832.65:8081;
    }
    server {
        listen 80;
        server_name 本机IP;
        location / {
            proxy_pass http://myServer;
            root html;
            index index.html;
        }
    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
